{"version":3,"sources":["../domains/eventEditor/src/ui/tickets/TicketRegistrationsLink.tsx","../domains/eventEditor/src/ui/tickets/ticketsList/cardView/TicketQuantity.tsx","../domains/eventEditor/src/ui/tickets/ticketsList/editable/EditableDesc.tsx","../domains/eventEditor/src/ui/tickets/ticketsList/editable/EditableName.tsx","../domains/eventEditor/src/ui/tickets/hooks/useRecalculateBasePrice.ts","../domains/eventEditor/src/ui/tickets/ticketsList/editable/EditablePrice.tsx","../domains/eventEditor/src/ui/tickets/hooks/useTicketsActionMenuItems.ts","../domains/eventEditor/src/ui/tickets/ticketsList/actionsMenu/TicketActionsMenu.tsx","../domains/eventEditor/src/ui/tickets/ticketsList/cardView/TicketDetailsPanel.tsx","../domains/eventEditor/src/ui/tickets/ticketsList/cardView/Details.tsx","../domains/eventEditor/src/ui/tickets/ticketsList/cardView/TicketCardSidebar.tsx","../domains/eventEditor/src/ui/tickets/ticketsList/cardView/TicketCard.tsx","../domains/eventEditor/src/ui/tickets/ticketsList/cardView/CardView.tsx"],"names":["TicketRegistrationsLink","ticket","admin","useConfig","siteUrl","adminUrl","getAdminUrl","adminSiteUrl","page","ADMIN_ROUTES","REGISTRATIONS","eventId","useEventId","regListUrl","addQueryArgs","event_id","ticket_id","dbId","return","countTitle","__","tooltip","tooltipProps","useMemoStringify","placement","count","registrationCount","title","emphasizeZero","offset","href","React","memo","getPropsAreEqual","TicketQuantity","entity","updateEntity","useTicketMutator","id","onChange","useCallback","qty","quantity","parseInfinity","onChangeValue","value","EditableDesc","className","onChangeDesc","description","ticketDesc","EditableName","view","lineCount","onChangeName","name","ticketName","fitText","tag","useRecalculateBasePrice","ticketId","getDataState","useInitialState","defaultBasePrice","useDefaultBasePrice","mutatePrices","useMutatePrices","updateTicket","ticketPrice","tpcData","updatedTicket","price","getBasePrice","prices","newPrices","order","isNew","calculateBasePrice","then","relatedPriceIds","reverseCalculate","EditablePrice","recalculateBasePrice","onChangePrice","amount","parseFloat","wrapperProps","placeholder","useTicketsActionMenuItems","useEntityActionsMenuItems","TicketActionsMenu","props","menuItems","TicketDetailsPanel","details","label","sold","type","Details","TicketCardSidebar","displayStartOrEndDate","useTicketsListFilterState","siteTimeToUtc","useTimeZoneTime","onEditHandler","dates","start","end","startDate","Date","toISOString","endDate","statusText","getTicketStatusTextLabel","displayDate","header","TicketCard","bgClassName","ticketStatusBgColorClassName","actionsMenu","layout","EntityActionsMenuLayout","Vertical","cacheId","reverse","sidebar","sidebarClass","CardView","filteredEntities","useTicketsListContext","EntityCard","entities"],"mappings":"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","file":"static/js/tickets-card-view.81af93d5.chunk.js","sourcesContent":["import React from 'react';\nimport { addQueryArgs } from '@wordpress/url';\nimport { __ } from '@wordpress/i18n';\n\nimport { ADMIN_ROUTES } from '@eventespresso/constants';\nimport { getAdminUrl, useEventId } from '@eventespresso/edtr-services';\nimport { getPropsAreEqual, useConfig } from '@eventespresso/services';\nimport { useMemoStringify } from '@eventespresso/hooks';\nimport { RegistrationsLink, ItemCount } from '@eventespresso/components';\nimport { Ticket } from '@eventespresso/edtr-services';\nimport type { TooltipProps } from '@eventespresso/adapters';\n\ninterface Props {\n\tticket: Ticket;\n}\n\nconst TicketRegistrationsLink: React.FC<Props> = ({ ticket }) => {\n\tconst {\n\t\tsiteUrl: { admin },\n\t} = useConfig();\n\tconst adminUrl = getAdminUrl({ adminSiteUrl: admin, page: ADMIN_ROUTES.REGISTRATIONS });\n\tconst eventId = useEventId();\n\tconst regListUrl = addQueryArgs(adminUrl, {\n\t\tevent_id: eventId,\n\t\tticket_id: ticket.dbId,\n\t\treturn: 'edit',\n\t});\n\tconst countTitle = __('total registrations.');\n\tconst tooltip = __('view registrations for this ticket.');\n\tconst tooltipProps = useMemoStringify<TooltipProps>({ placement: 'top' });\n\n\treturn (\n\t\t<ItemCount count={ticket.registrationCount} title={countTitle} emphasizeZero={false} offset={[12, -4]}>\n\t\t\t<RegistrationsLink href={regListUrl} tooltip={tooltip} tooltipProps={tooltipProps} />\n\t\t</ItemCount>\n\t);\n};\n\nexport default React.memo(TicketRegistrationsLink, getPropsAreEqual(['ticket', 'cacheId']));\n","import React, { useCallback } from 'react';\nimport { __ } from '@wordpress/i18n';\n\nimport { parseInfinity, getPropsAreEqual } from '@eventespresso/services';\nimport { InlineEditInfinity, TextProps } from '@eventespresso/components';\nimport { useTicketMutator } from '@eventespresso/edtr-services';\nimport type { TicketItemProps } from '../types';\n\nconst TicketQuantity: React.FC<TicketItemProps> = ({ entity: ticket }) => {\n\tconst { updateEntity } = useTicketMutator(ticket.id);\n\n\tconst onChange: TextProps['onChange'] = useCallback(\n\t\t(qty) => {\n\t\t\tconst quantity = parseInfinity(qty);\n\t\t\tif (quantity !== ticket.quantity) {\n\t\t\t\tupdateEntity({ quantity });\n\t\t\t}\n\t\t},\n\t\t[ticket.quantity, updateEntity]\n\t);\n\n\treturn (\n\t\t<InlineEditInfinity\n\t\t\tonChangeValue={onChange}\n\t\t\tvalue={`${ticket.quantity}`}\n\t\t\ttooltip={__('edit quantity of tickets available...')}\n\t\t/>\n\t);\n};\n\nexport default React.memo(TicketQuantity, getPropsAreEqual(['entity', 'cacheId']));\n","import React, { useCallback } from 'react';\nimport { __ } from '@wordpress/i18n';\n\nimport type { TicketItemProps } from '../types';\nimport { useTicketMutator } from '@eventespresso/edtr-services';\nimport { InlineEditTextArea } from '@eventespresso/components';\nimport { getPropsAreEqual } from '@eventespresso/services';\n\ninterface EditableDescProps extends TicketItemProps {\n\tclassName?: string;\n}\n\nconst EditableDesc: React.FC<EditableDescProps> = ({ entity: ticket, className }) => {\n\tconst { updateEntity } = useTicketMutator(ticket.id);\n\n\tconst onChangeDesc = useCallback(\n\t\t(description: string): void => {\n\t\t\tif (description !== ticket.description) {\n\t\t\t\tupdateEntity({ description });\n\t\t\t}\n\t\t},\n\t\t[ticket.description, updateEntity]\n\t);\n\n\tconst tooltip = __('edit description...');\n\n\tconst ticketDesc = ticket.description || tooltip;\n\n\treturn (\n\t\t<InlineEditTextArea className={className} onChangeValue={onChangeDesc} tooltip={tooltip} value={ticketDesc} />\n\t);\n};\n\nexport default React.memo(EditableDesc, getPropsAreEqual(['entity', 'description']));\n","import React, { useCallback } from 'react';\nimport { __ } from '@wordpress/i18n';\n\nimport type { TicketItemProps } from '../types';\nimport { useTicketMutator } from '@eventespresso/edtr-services';\nimport { InlineEditText } from '@eventespresso/components';\nimport { getPropsAreEqual } from '@eventespresso/services';\n\ninterface EditableNameProps extends TicketItemProps {\n\tclassName?: string;\n\tview?: 'card' | 'table';\n}\n\nconst EditableName: React.FC<EditableNameProps> = ({ className, entity: ticket, view = 'card' }) => {\n\tconst { updateEntity } = useTicketMutator(ticket.id);\n\n\tconst lineCount = view === 'card' && 2;\n\n\tconst onChangeName = useCallback(\n\t\t(name: string): void => {\n\t\t\tif (name !== ticket.name) {\n\t\t\t\tupdateEntity({ name });\n\t\t\t}\n\t\t},\n\t\t[ticket.name, updateEntity]\n\t);\n\n\tconst tooltip = __('edit title...');\n\n\tconst ticketName = ticket.name || tooltip;\n\n\treturn (\n\t\t<InlineEditText\n\t\t\tclassName={className}\n\t\t\tfitText={view === 'card'}\n\t\t\tlineCount={lineCount}\n\t\t\tonChangeValue={onChangeName}\n\t\t\ttag={view === 'table' ? 'p' : 'h4'}\n\t\t\ttooltip={tooltip}\n\t\t\tvalue={ticketName}\n\t\t/>\n\t);\n};\n\nexport default React.memo(EditableName, getPropsAreEqual(['entity', 'name']));\n","import { useCallback } from 'react';\n\nimport { EntityId } from '@eventespresso/data';\nimport { calculateBasePrice, useInitialState } from '@eventespresso/tpc';\nimport { getBasePrice } from '@eventespresso/predicates';\nimport { useDefaultBasePrice, useMutatePrices } from '@eventespresso/tpc';\nimport { useTicketMutator } from '@eventespresso/edtr-services';\n\ntype Callback = (ticketPrice: number) => void;\n\nconst useRecalculateBasePrice = (ticketId: EntityId): Callback => {\n\t// This will give us the exact state expected by `calculateBasePrice()`\n\tconst getDataState = useInitialState({ ticketId });\n\t// This default price will be added if there is none\n\tconst defaultBasePrice = useDefaultBasePrice();\n\tconst mutatePrices = useMutatePrices();\n\tconst { updateEntity: updateTicket } = useTicketMutator(ticketId);\n\n\treturn useCallback<Callback>(\n\t\t(ticketPrice) => {\n\t\t\tlet tpcData = getDataState(null);\n\t\t\t// Make sure the new ticket price is used\n\t\t\tconst updatedTicket = { ...tpcData?.ticket, price: ticketPrice };\n\t\t\ttpcData = { ...tpcData, ticket: updatedTicket };\n\n\t\t\tconst exitingBasePrice = getBasePrice(tpcData?.prices);\n\t\t\t// if the ticket does not have a base price,\n\t\t\t// that means it was free and now a price has been added ¯\\_(ツ)_/¯\n\t\t\tif (!exitingBasePrice) {\n\t\t\t\tconst newPrices = [\n\t\t\t\t\t// add the default price\n\t\t\t\t\t{ ...defaultBasePrice, order: 1, isNew: true },\n\t\t\t\t\t// add the existing ones, just in case we are dealing with aliens,\n\t\t\t\t\t// don't get me wrong, because only they can have other prices without a base price,\n\t\t\t\t\t// may be their taxation systen works differently, who knows ¯\\_(ツ)_/¯\n\t\t\t\t\t...tpcData?.prices,\n\t\t\t\t];\n\t\t\t\ttpcData = { ...tpcData, prices: newPrices };\n\t\t\t}\n\t\t\t// get the list of updated prices with the amount of base price updated\n\t\t\tconst newPrices = calculateBasePrice(tpcData);\n\n\t\t\tmutatePrices(newPrices).then((relatedPriceIds) => {\n\t\t\t\tupdateTicket({\n\t\t\t\t\t// this is the ticket prices amount\n\t\t\t\t\tprice: ticketPrice,\n\t\t\t\t\t// since ticket price has been changed, we need to go in reverse gear ◀️\n\t\t\t\t\treverseCalculate: true,\n\t\t\t\t\t// Make sure related prices are updated\n\t\t\t\t\tprices: relatedPriceIds,\n\t\t\t\t});\n\t\t\t});\n\t\t},\n\t\t[defaultBasePrice, getDataState, mutatePrices, updateTicket]\n\t);\n};\n\nexport default useRecalculateBasePrice;\n","import React, { useCallback } from 'react';\nimport { __ } from '@wordpress/i18n';\n\nimport type { TicketItemProps } from '../types';\nimport { getPropsAreEqual } from '@eventespresso/services';\nimport { CurrencyInput } from '@eventespresso/components';\nimport useRecalculateBasePrice from '../../hooks/useRecalculateBasePrice';\nimport { useMemoStringify } from '@eventespresso/hooks';\n\ninterface EditablePriceProps extends TicketItemProps {\n\tclassName?: string;\n}\n\nconst EditablePrice: React.FC<EditablePriceProps> = ({ entity: ticket, className }) => {\n\tconst recalculateBasePrice = useRecalculateBasePrice(ticket.id);\n\tconst onChangePrice = useCallback(\n\t\t({ amount }: any): void => {\n\t\t\tconst price = parseFloat(amount);\n\t\t\tif (price !== ticket.price) {\n\t\t\t\trecalculateBasePrice(price);\n\t\t\t}\n\t\t},\n\t\t[recalculateBasePrice, ticket.price]\n\t);\n\n\tconst wrapperProps = useMemoStringify({ className });\n\n\treturn (\n\t\t<CurrencyInput\n\t\t\tid={ticket.id}\n\t\t\tamount={ticket.price}\n\t\t\tplaceholder={__('set price...')}\n\t\t\twrapperProps={wrapperProps}\n\t\t\tonChange={onChangePrice}\n\t\t\ttag={'h3'}\n\t\t\ttooltip={__('edit ticket total...')}\n\t\t/>\n\t);\n};\n\nexport default React.memo(EditablePrice, getPropsAreEqual(['entity', 'price']));\n","import React from 'react';\n\nimport { Ticket } from '@eventespresso/edtr-services';\nimport { useEntityActionsMenuItems } from '@edtrHooks/index';\n\nconst useTicketsActionMenuItems = (ticket: Ticket): Array<React.ReactNode> => {\n\treturn useEntityActionsMenuItems('ticket', ticket);\n};\n\nexport default useTicketsActionMenuItems;\n","import React from 'react';\n\nimport type { ActionsMenuComponentProps } from '@eventespresso/registry';\nimport { EntityActionsMenu } from '@eventespresso/components';\nimport useTicketsActionMenuItems from '../../hooks/useTicketsActionMenuItems';\nimport { Ticket } from '@eventespresso/edtr-services';\nimport { getPropsAreEqual } from '@eventespresso/services';\n\nconst TicketActionsMenu: React.FC<ActionsMenuComponentProps<Ticket>> = ({ entity, ...props }) => {\n\tconst menuItems = useTicketsActionMenuItems(entity);\n\n\treturn <EntityActionsMenu {...props} menuItems={menuItems} />;\n};\n\nexport default React.memo(TicketActionsMenu, getPropsAreEqual(['entity', 'cacheId']));\n","import React from 'react';\nimport { __ } from '@wordpress/i18n';\n\nimport TicketRegistrationsLink from '../../TicketRegistrationsLink';\nimport { EntityDetailsPanel, EntityDetailsPanelSold } from '@eventespresso/components';\nimport TicketQuantity from './TicketQuantity';\nimport { getPropsAreEqual } from '@eventespresso/services';\nimport type { TicketItemProps } from '../types';\n\nconst TicketDetailsPanel: React.FC<TicketItemProps> = React.memo(({ entity: ticket }) => {\n\tconst details = [\n\t\t{\n\t\t\tid: 'ee-ticket-sold',\n\t\t\tlabel: __('sold'),\n\t\t\tvalue: <EntityDetailsPanelSold dbId={ticket.dbId} sold={ticket.sold} type='ticket' />,\n\t\t},\n\t\t{\n\t\t\tid: 'ee-ticket-qty',\n\t\t\tlabel: __('quantity'),\n\t\t\tvalue: <TicketQuantity entity={ticket} />,\n\t\t},\n\t\t{\n\t\t\tid: 'ee-ticket-registrations',\n\t\t\tlabel: __('reg list'),\n\t\t\tvalue: <TicketRegistrationsLink ticket={ticket} />,\n\t\t},\n\t];\n\n\treturn <EntityDetailsPanel details={details} className='ee-editor-ticket-details-sold-rsrvd-qty-div' />;\n});\n\nexport default React.memo(TicketDetailsPanel, getPropsAreEqual(['entity', 'cacheId']));\n","import React from 'react';\n\nimport { getPropsAreEqual } from '@eventespresso/services';\nimport { EditableDesc, EditableName, EditablePrice } from '../editable';\nimport TicketDetailsPanel from './TicketDetailsPanel';\nimport type { TicketItemProps } from '../types';\n\nconst Details: React.FC<TicketItemProps> = ({ entity: ticket }) => {\n\treturn (\n\t\t<>\n\t\t\t<EditableName className={'entity-card-details__name'} entity={ticket} />\n\n\t\t\t<EditableDesc className={'entity-card-details__description'} entity={ticket} />\n\n\t\t\t<EditablePrice className='entity-card-details__price' entity={ticket} />\n\n\t\t\t<TicketDetailsPanel entity={ticket} />\n\t\t</>\n\t);\n};\n\nexport default React.memo(Details, getPropsAreEqual(['entity', 'cacheId']));\n","import React, { useCallback } from 'react';\nimport { __ } from '@wordpress/i18n';\n\nimport { CalendarDateSwitcher, EditDateRangeButton } from '@eventespresso/components';\nimport { getTicketStatusTextLabel } from '@eventespresso/helpers';\nimport { useTicketsListFilterState } from '@edtrServices/filterState';\nimport { getPropsAreEqual } from '@eventespresso/services';\nimport { useTicketMutator } from '@eventespresso/edtr-services';\nimport { useTimeZoneTime } from '@eventespresso/services';\nimport type { TicketItemProps } from '../types';\n\nconst TicketCardSidebar: React.FC<TicketItemProps> = ({ entity: ticket }) => {\n\tconst { displayStartOrEndDate } = useTicketsListFilterState();\n\tconst { updateEntity } = useTicketMutator(ticket.id);\n\tconst { siteTimeToUtc } = useTimeZoneTime();\n\n\tconst onEditHandler = useCallback(\n\t\t(dates: string[]): void => {\n\t\t\tconst [start, end] = dates;\n\t\t\t// convert start & end dates to proper UTC \"startDate\" and \"endDate\"\n\t\t\tconst startDate = siteTimeToUtc(new Date(start)).toISOString();\n\t\t\tconst endDate = siteTimeToUtc(new Date(end)).toISOString();\n\t\t\tupdateEntity({ startDate, endDate });\n\t\t},\n\t\t[siteTimeToUtc, updateEntity]\n\t);\n\tconst statusText = getTicketStatusTextLabel(ticket);\n\n\treturn ticket ? (\n\t\t<>\n\t\t\t<CalendarDateSwitcher\n\t\t\t\tdisplayDate={displayStartOrEndDate}\n\t\t\t\tendDate={ticket.endDate}\n\t\t\t\tstartDate={ticket.startDate}\n\t\t\t/>\n\t\t\t<EditDateRangeButton\n\t\t\t\tendDate={ticket.endDate}\n\t\t\t\theader={__('Edit Ticket Sales Start and End Dates')}\n\t\t\t\tonEditHandler={onEditHandler}\n\t\t\t\ttooltip={__('edit ticket sales start and end dates')}\n\t\t\t\tstartDate={ticket.startDate}\n\t\t\t/>\n\t\t\t<div className={'ee-ticket-status-label'}>{statusText}</div>\n\t\t</>\n\t) : null;\n};\n\nexport default React.memo(TicketCardSidebar, getPropsAreEqual(['entity', 'cacheId']));\n","import React from 'react';\n\nimport Details from './Details';\nimport TicketCardSidebar from './TicketCardSidebar';\nimport TicketActionsMenu from '../actionsMenu/TicketActionsMenu';\nimport { EntityActionsMenuLayout } from '@eventespresso/components';\nimport { EntityCard } from '@eventespresso/components';\nimport { ticketStatusBgColorClassName } from '@eventespresso/helpers';\nimport { useTicketsListFilterState } from '@edtrServices/filterState';\nimport { getPropsAreEqual } from '@eventespresso/services';\nimport type { TicketItemProps } from '../types';\n\nconst TicketCard: React.FC<TicketItemProps> = ({ entity: ticket }) => {\n\tconst { displayStartOrEndDate } = useTicketsListFilterState();\n\tconst bgClassName = ticketStatusBgColorClassName(ticket);\n\n\treturn ticket ? (\n\t\t<EntityCard\n\t\t\tactionsMenu={<TicketActionsMenu entity={ticket} layout={EntityActionsMenuLayout.Vertical} />}\n\t\t\tcacheId={ticket.cacheId + displayStartOrEndDate}\n\t\t\tdetails={<Details entity={ticket} />}\n\t\t\tentity={ticket}\n\t\t\treverse\n\t\t\tsidebar={<TicketCardSidebar entity={ticket} />}\n\t\t\tsidebarClass={bgClassName}\n\t\t/>\n\t) : null;\n};\n\nexport default React.memo(TicketCard, getPropsAreEqual(['entity', 'cacheId']));\n","import React from 'react';\nimport { EntityCardList } from '@eventespresso/components';\nimport TicketCard from './TicketCard';\nimport { useTicketsListContext } from '@edtrServices/context/EntityListContext';\n\nconst CardView: React.FC = () => {\n\tconst { filteredEntities } = useTicketsListContext();\n\n\treturn <EntityCardList EntityCard={TicketCard} entities={filteredEntities} />;\n};\n\nexport default CardView;\n"],"sourceRoot":""}