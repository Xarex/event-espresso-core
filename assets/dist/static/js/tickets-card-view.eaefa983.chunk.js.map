{"version":3,"sources":["../domains/eventEditor/src/ui/tickets/TicketRegistrationsLink.tsx","../domains/eventEditor/src/ui/tickets/ticketsList/cardView/TicketQuantity.tsx","../domains/eventEditor/src/ui/tickets/ticketsList/editable/EditableDesc.tsx","../domains/eventEditor/src/ui/tickets/ticketsList/editable/EditableName.tsx","../domains/eventEditor/src/ui/tickets/hooks/useRecalculateBasePrice.ts","../domains/eventEditor/src/ui/tickets/ticketsList/editable/EditablePrice.tsx","../domains/eventEditor/src/ui/tickets/hooks/useTicketsActionMenuItems.ts","../domains/eventEditor/src/ui/tickets/ticketsList/actionsMenu/TicketActionsMenu.tsx","../domains/eventEditor/src/ui/tickets/ticketsList/cardView/TicketDetailsPanel.tsx","../domains/eventEditor/src/ui/tickets/ticketsList/cardView/Details.tsx","../domains/eventEditor/src/ui/tickets/ticketsList/cardView/TicketCard.tsx","../domains/eventEditor/src/ui/tickets/ticketsList/cardView/CardView.tsx"],"names":["TicketRegistrationsLink","ticket","admin","useConfig","siteUrl","adminUrl","getAdminUrl","adminSiteUrl","page","ADMIN_ROUTES","REGISTRATIONS","eventId","useEventId","regListUrl","addQueryArgs","event_id","ticket_id","dbId","return","countTitle","__","tooltip","tooltipProps","useMemoStringify","placement","count","registrationCount","title","emphasizeZero","offset","href","React","memo","getPropsAreEqual","TicketQuantity","entity","updateEntity","useTicketMutator","id","onChange","useCallback","qty","quantity","parseInfinity","onChangeValue","value","EditableDesc","className","onChangeDesc","description","cacheId","ticketDesc","EditableName","view","onChangeName","name","ticketName","fitText","tag","useRecalculateBasePrice","ticketId","getDataState","useInitialState","usePriceMutator","calculateBasePrice","filter","isBasePrice","basePrice","amount","EditablePrice","recalculateBasePrice","onChangePrice","price","parseFloat","reverseCalculate","wrapperProps","placeholder","useTicketsActionMenuItems","useEntityActionsMenuItems","TicketActionsMenu","props","menuItems","TicketDetailsPanel","details","label","sold","Details","TicketCard","displayStartOrEndDate","useTicketsListFilterState","bgClassName","ticketStatusBgColorClassName","footer","getTicketStatusTextLabel","labels","actionsMenu","layout","EntityActionsMenuLayout","Vertical","reverse","sidebar","displayDate","endDate","startDate","CardView","filteredEntities","useTicketsListContext","EntityCard","entities"],"mappings":"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","file":"static/js/tickets-card-view.eaefa983.chunk.js","sourcesContent":["import React from 'react';\nimport { addQueryArgs } from '@wordpress/url';\nimport { __ } from '@wordpress/i18n';\n\nimport { ADMIN_ROUTES } from '@eventespresso/constants';\nimport { getAdminUrl, useEventId } from '@eventespresso/edtr-services';\nimport { getPropsAreEqual, useConfig } from '@eventespresso/services';\nimport { useMemoStringify } from '@eventespresso/hooks';\nimport { RegistrationsLink, ItemCount } from '@eventespresso/components';\nimport { Ticket } from '@eventespresso/edtr-services';\nimport type { TooltipProps } from '@eventespresso/adapters';\n\ninterface Props {\n\tticket: Ticket;\n}\n\nconst TicketRegistrationsLink: React.FC<Props> = ({ ticket }) => {\n\tconst {\n\t\tsiteUrl: { admin },\n\t} = useConfig();\n\tconst adminUrl = getAdminUrl({ adminSiteUrl: admin, page: ADMIN_ROUTES.REGISTRATIONS });\n\tconst eventId = useEventId();\n\tconst regListUrl = addQueryArgs(adminUrl, {\n\t\tevent_id: eventId,\n\t\tticket_id: ticket.dbId,\n\t\treturn: 'edit',\n\t});\n\tconst countTitle = __('total registrations.');\n\tconst tooltip = __('view registrations for this ticket.');\n\tconst tooltipProps = useMemoStringify<TooltipProps>({ placement: 'top' });\n\n\treturn (\n\t\t<ItemCount count={ticket.registrationCount} title={countTitle} emphasizeZero={false} offset={[12, -4]}>\n\t\t\t<RegistrationsLink href={regListUrl} tooltip={tooltip} tooltipProps={tooltipProps} />\n\t\t</ItemCount>\n\t);\n};\n\nexport default React.memo(TicketRegistrationsLink, getPropsAreEqual(['ticket', 'cacheId']));\n","import React, { useCallback } from 'react';\n\nimport { parseInfinity, getPropsAreEqual } from '@eventespresso/services';\nimport { InlineEditInfinity, TextProps } from '@eventespresso/components';\nimport { useTicketMutator } from '@eventespresso/edtr-services';\nimport type { TicketItemProps } from '../types';\n\nconst TicketQuantity: React.FC<TicketItemProps> = ({ entity: ticket }) => {\n\tconst { updateEntity } = useTicketMutator(ticket.id);\n\n\tconst onChange: TextProps['onChange'] = useCallback(\n\t\t(qty) => {\n\t\t\tconst quantity = parseInfinity(qty);\n\t\t\tif (quantity !== ticket.quantity) {\n\t\t\t\tupdateEntity({ quantity });\n\t\t\t}\n\t\t},\n\t\t[ticket.quantity, updateEntity]\n\t);\n\n\treturn <InlineEditInfinity onChangeValue={onChange} value={`${ticket.quantity}`} />;\n};\n\nexport default React.memo(TicketQuantity, getPropsAreEqual(['entity', 'cacheId']));\n","import React, { useCallback } from 'react';\nimport { __ } from '@wordpress/i18n';\n\nimport type { TicketItemProps } from '../types';\nimport { useTicketMutator } from '@eventespresso/edtr-services';\nimport { InlineEditTextArea } from '@eventespresso/components';\nimport { getPropsAreEqual } from '@eventespresso/services';\n\ninterface EditableDescProps extends TicketItemProps {\n\tclassName?: string;\n}\n\nconst EditableDesc: React.FC<EditableDescProps> = ({ entity: ticket, className }) => {\n\tconst { updateEntity } = useTicketMutator(ticket.id);\n\n\tconst onChangeDesc = useCallback(\n\t\t(description: string): void => {\n\t\t\tif (description !== ticket.description) {\n\t\t\t\tupdateEntity({ description });\n\t\t\t}\n\t\t},\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t\t[ticket.cacheId, updateEntity]\n\t);\n\n\tconst ticketDesc = ticket.description ? ticket.description : __('Edit description...');\n\n\treturn <InlineEditTextArea className={className} onChangeValue={onChangeDesc} value={ticketDesc} />;\n};\n\nexport default React.memo(EditableDesc, getPropsAreEqual(['entity', 'description']));\n","import React, { useCallback } from 'react';\nimport { __ } from '@wordpress/i18n';\n\nimport type { TicketItemProps } from '../types';\nimport { useTicketMutator } from '@eventespresso/edtr-services';\nimport { InlineEditText } from '@eventespresso/components';\nimport { getPropsAreEqual } from '@eventespresso/services';\n\ninterface EditableNameProps extends TicketItemProps {\n\tclassName?: string;\n\tview?: 'card' | 'table';\n}\n\nconst EditableName: React.FC<EditableNameProps> = ({ className, entity: ticket, view = 'card' }) => {\n\tconst { updateEntity } = useTicketMutator(ticket.id);\n\n\tconst onChangeName = useCallback(\n\t\t(name: string): void => {\n\t\t\tif (name !== ticket.name) {\n\t\t\t\tupdateEntity({ name });\n\t\t\t}\n\t\t},\n\t\t[ticket.name, updateEntity]\n\t);\n\n\tconst ticketName = ticket.name ? ticket.name : __('Edit title...');\n\n\treturn (\n\t\t<InlineEditText\n\t\t\tfitText={view === 'card'}\n\t\t\ttag={view === 'table' ? 'p' : 'h4'}\n\t\t\tclassName={className}\n\t\t\tonChangeValue={onChangeName}\n\t\t\tvalue={ticketName}\n\t\t/>\n\t);\n};\n\nexport default React.memo(EditableName, getPropsAreEqual(['entity', 'name']));\n","import { useCallback } from 'react';\n\nimport { EntityId } from '@eventespresso/data';\nimport { calculateBasePrice, useInitialState } from '@eventespresso/tpc';\nimport { isBasePrice } from '@eventespresso/predicates';\nimport { usePriceMutator } from '@eventespresso/edtr-services';\n\nconst useRecalculateBasePrice = (ticketId: EntityId): VoidFunction => {\n\t// This will give us the exact state expected by `calculateBasePrice()`\n\tconst getDataState = useInitialState({ ticketId });\n\tconst { updateEntity } = usePriceMutator();\n\n\treturn useCallback(() => {\n\t\t// get the list of updated prices with the amount of base price updated\n\t\tconst newPrices = calculateBasePrice(getDataState(null));\n\t\t// the price if present should be the basePrice\n\t\tconst [basePrice] = newPrices.filter(isBasePrice);\n\n\t\t// if we are lucky\n\t\tif (basePrice?.id) {\n\t\t\tconst { id, amount } = basePrice;\n\t\t\t// update the base price\n\t\t\tupdateEntity({ id, amount });\n\t\t}\n\t}, [getDataState, updateEntity]);\n};\n\nexport default useRecalculateBasePrice;\n","import React, { useCallback } from 'react';\nimport { __ } from '@wordpress/i18n';\n\nimport type { TicketItemProps } from '../types';\nimport { useTicketMutator } from '@eventespresso/edtr-services';\nimport { getPropsAreEqual } from '@eventespresso/services';\nimport { CurrencyInput } from '@eventespresso/components';\nimport useRecalculateBasePrice from '../../hooks/useRecalculateBasePrice';\nimport { useMemoStringify } from '@eventespresso/hooks';\n\ninterface EditablePriceProps extends TicketItemProps {\n\tclassName?: string;\n}\n\nconst EditablePrice: React.FC<EditablePriceProps> = ({ entity: ticket, className }) => {\n\tconst { updateEntity } = useTicketMutator(ticket.id);\n\tconst recalculateBasePrice = useRecalculateBasePrice(ticket.id);\n\tconst onChangePrice = useCallback(\n\t\t({ amount: price }: any): void => {\n\t\t\tprice = parseFloat(price);\n\t\t\tif (price !== ticket.price) {\n\t\t\t\tupdateEntity({ price, reverseCalculate: true });\n\t\t\t\trecalculateBasePrice();\n\t\t\t}\n\t\t},\n\t\t[recalculateBasePrice, ticket.price, updateEntity]\n\t);\n\n\tconst wrapperProps = useMemoStringify({ className });\n\n\treturn (\n\t\t<CurrencyInput\n\t\t\tid={ticket.id}\n\t\t\tamount={ticket.price}\n\t\t\tplaceholder={__('set price...')}\n\t\t\twrapperProps={wrapperProps}\n\t\t\tonChange={onChangePrice}\n\t\t\ttag={'h3'}\n\t\t/>\n\t);\n};\n\nexport default React.memo(EditablePrice, getPropsAreEqual(['entity', 'price']));\n","import React from 'react';\n\nimport { Ticket } from '@eventespresso/edtr-services';\nimport { useEntityActionsMenuItems } from '@edtrHooks/index';\n\nconst useTicketsActionMenuItems = (ticket: Ticket): Array<React.ReactNode> => {\n\treturn useEntityActionsMenuItems('ticket', ticket);\n};\n\nexport default useTicketsActionMenuItems;\n","import React from 'react';\n\nimport type { ActionsMenuComponentProps } from '@eventespresso/registry';\nimport { EntityActionsMenu } from '@eventespresso/components';\nimport useTicketsActionMenuItems from '../../hooks/useTicketsActionMenuItems';\nimport { Ticket } from '@eventespresso/edtr-services';\nimport { getPropsAreEqual } from '@eventespresso/services';\n\nconst TicketActionsMenu: React.FC<ActionsMenuComponentProps<Ticket>> = ({ entity, ...props }) => {\n\tconst menuItems = useTicketsActionMenuItems(entity);\n\n\treturn <EntityActionsMenu {...props} menuItems={menuItems} />;\n};\n\nexport default React.memo(TicketActionsMenu, getPropsAreEqual(['entity', 'cacheId']));\n","import React from 'react';\nimport { __ } from '@wordpress/i18n';\n\nimport TicketRegistrationsLink from '../../TicketRegistrationsLink';\nimport { EntityDetailsPanel } from '@eventespresso/components';\nimport TicketQuantity from './TicketQuantity';\nimport { getPropsAreEqual } from '@eventespresso/services';\nimport type { TicketItemProps } from '../types';\n\nconst TicketDetailsPanel: React.FC<TicketItemProps> = React.memo(({ entity: ticket }) => {\n\tconst details = [\n\t\t{\n\t\t\tid: 'ee-ticket-sold',\n\t\t\tlabel: __('sold'),\n\t\t\tvalue: ticket.sold,\n\t\t},\n\t\t{\n\t\t\tid: 'ee-ticket-qty',\n\t\t\tlabel: __('quantity'),\n\t\t\tvalue: <TicketQuantity entity={ticket} />,\n\t\t},\n\t\t{\n\t\t\tid: 'ee-ticket-registrations',\n\t\t\tlabel: __('reg list'),\n\t\t\tvalue: <TicketRegistrationsLink ticket={ticket} />,\n\t\t},\n\t];\n\treturn <EntityDetailsPanel details={details} className='ee-editor-ticket-details-sold-rsrvd-qty-div' />;\n});\n\nexport default React.memo(TicketDetailsPanel, getPropsAreEqual(['entity', 'cacheId']));\n","import React from 'react';\n\nimport { getPropsAreEqual } from '@eventespresso/services';\nimport { EditableDesc, EditableName, EditablePrice } from '../editable';\nimport TicketDetailsPanel from './TicketDetailsPanel';\nimport type { TicketItemProps } from '../types';\n\nconst Details: React.FC<TicketItemProps> = ({ entity: ticket }) => {\n\treturn (\n\t\t<>\n\t\t\t<EditableName className={'entity-card-details__name'} entity={ticket} />\n\n\t\t\t<EditableDesc className={'entity-card-details__description'} entity={ticket} />\n\n\t\t\t<EditablePrice className='entity-card-details__price' entity={ticket} />\n\n\t\t\t<TicketDetailsPanel entity={ticket} />\n\t\t</>\n\t);\n};\n\nexport default React.memo(Details, getPropsAreEqual(['entity', 'cacheId']));\n","import React from 'react';\n\nimport { CalendarDateSwitcher } from '@eventespresso/components';\nimport Details from './Details';\n\nimport TicketActionsMenu from '../actionsMenu/TicketActionsMenu';\nimport { EntityActionsMenuLayout } from '@eventespresso/components';\n\nimport { EntityCard } from '@eventespresso/components';\nimport { getTicketStatusTextLabel, ticketStatusBgColorClassName } from '@eventespresso/helpers';\nimport { useTicketsListFilterState } from '@edtrServices/filterState';\nimport type { TicketItemProps } from '../types';\nimport { getPropsAreEqual } from '@eventespresso/services';\nimport { useMemoStringify } from '@eventespresso/hooks';\n\nconst TicketCard: React.FC<TicketItemProps> = ({ entity: ticket }) => {\n\tconst { displayStartOrEndDate } = useTicketsListFilterState();\n\tconst bgClassName = ticketStatusBgColorClassName(ticket);\n\tconst footer = getTicketStatusTextLabel(ticket);\n\tconst labels = useMemoStringify({ footer });\n\n\treturn ticket ? (\n\t\t<EntityCard\n\t\t\tactionsMenu={<TicketActionsMenu entity={ticket} layout={EntityActionsMenuLayout.Vertical} />}\n\t\t\tcacheId={ticket.cacheId + displayStartOrEndDate}\n\t\t\tdetails={<Details entity={ticket} />}\n\t\t\tentity={ticket}\n\t\t\treverse\n\t\t\tsidebar={\n\t\t\t\t<CalendarDateSwitcher\n\t\t\t\t\tclassName={bgClassName}\n\t\t\t\t\tdisplayDate={displayStartOrEndDate}\n\t\t\t\t\tendDate={ticket.endDate}\n\t\t\t\t\tlabels={labels}\n\t\t\t\t\tstartDate={ticket.startDate}\n\t\t\t\t/>\n\t\t\t}\n\t\t/>\n\t) : null;\n};\n\nexport default React.memo(TicketCard, getPropsAreEqual(['entity', 'cacheId']));\n","import React from 'react';\nimport { EntityCardList } from '@eventespresso/components';\nimport TicketCard from './TicketCard';\nimport { useTicketsListContext } from '@edtrServices/context/EntityListContext';\n\nconst CardView: React.FC = () => {\n\tconst { filteredEntities } = useTicketsListContext();\n\n\treturn <EntityCardList EntityCard={TicketCard} entities={filteredEntities} />;\n};\n\nexport default CardView;\n"],"sourceRoot":""}