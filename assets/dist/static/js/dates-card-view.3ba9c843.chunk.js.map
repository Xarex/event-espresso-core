{"version":3,"sources":["../domains/eventEditor/src/ui/datetimes/DateRegistrationsLink.tsx","../domains/eventEditor/src/ui/datetimes/datesList/cardView/DateCapacity.tsx","../domains/eventEditor/src/ui/datetimes/datesList/editable/EditableDesc.tsx","../domains/eventEditor/src/ui/datetimes/datesList/editable/EditableName.tsx","../domains/eventEditor/src/ui/datetimes/hooks/useDatesActionMenuItems.ts","../domains/eventEditor/src/ui/datetimes/datesList/actionsMenu/DateActionsMenu.tsx","../domains/eventEditor/src/ui/datetimes/datesList/cardView/DateDetailsPanel.tsx","../domains/eventEditor/src/ui/datetimes/datesList/cardView/Details.tsx","../domains/eventEditor/src/ui/datetimes/datesList/cardView/DateCard.tsx","../domains/eventEditor/src/ui/datetimes/datesList/cardView/CardView.tsx"],"names":["DateRegistrationsLink","datetime","admin","useConfig","siteUrl","adminUrl","getAdminUrl","adminSiteUrl","page","ADMIN_ROUTES","REGISTRATIONS","eventId","useEventId","regListUrl","addQueryArgs","event_id","datetime_id","dbId","return","tooltip","__","tooltipProps","useMemoStringify","placement","href","React","memo","getPropsAreEqual","DateCapacity","entity","updateEntity","useDatetimeMutator","id","updateRelatedTickets","useUpdateRelatedTickets","ticketQuantityForCapacity","useTicketQuantityForCapacity","onChange","useCallback","cap","capacity","parseInfinity","inputGenerator","onChangeValue","value","EditableDesc","className","onChangeDesc","description","dateDesc","EditableName","view","dateName","name","onChangeName","fitText","tag","useDatesActionMenuItems","useEntityActionsMenuItems","DateActionsMenu","props","menuItems","DateDetailsPanel","details","label","sold","Details","DateCard","date","bgClassName","datetimeStatusBgColorClassName","displayStartOrEndDate","useDatesListFilterState","footer","getDatetimeStatusTextLabel","labels","cacheId","actionsMenu","layout","EntityActionsMenuLayout","Vertical","sidebar","displayDate","endDate","startDate","CardView","filteredEntities","useDatesListContext","EntityCard","entities"],"mappings":"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","file":"static/js/dates-card-view.3ba9c843.chunk.js","sourcesContent":["import React from 'react';\nimport { addQueryArgs } from '@wordpress/url';\nimport { __ } from '@wordpress/i18n';\n\nimport { ADMIN_ROUTES } from '@eventespresso/constants';\nimport type { Datetime } from '@eventespresso/edtr-services';\nimport { getAdminUrl } from '@eventespresso/edtr-services';\nimport { getPropsAreEqual } from '@eventespresso/services';\nimport { useMemoStringify } from '@eventespresso/hooks';\nimport { RegistrationsLink } from '@eventespresso/components';\nimport { useConfig } from '@eventespresso/services';\nimport { useEventId } from '@eventespresso/edtr-services';\nimport type { TooltipProps } from '@eventespresso/adapters';\n\ninterface Props {\n\tdatetime: Datetime;\n}\n\nconst DateRegistrationsLink: React.FC<Props> = ({ datetime }) => {\n\tconst {\n\t\tsiteUrl: { admin },\n\t} = useConfig();\n\tconst adminUrl = getAdminUrl({ adminSiteUrl: admin, page: ADMIN_ROUTES.REGISTRATIONS });\n\tconst eventId = useEventId();\n\tconst regListUrl = addQueryArgs(adminUrl, {\n\t\tevent_id: eventId,\n\t\tdatetime_id: datetime.dbId,\n\t\treturn: 'edit',\n\t});\n\tconst tooltip = __('view registrations for this date.');\n\tconst tooltipProps = useMemoStringify<TooltipProps>({ placement: 'top' });\n\n\treturn <RegistrationsLink href={regListUrl} tooltip={tooltip} tooltipProps={tooltipProps} />;\n};\n\nexport default React.memo(DateRegistrationsLink, getPropsAreEqual(['datetime', 'cacheId']));\n","import React, { useCallback } from 'react';\n\nimport { parseInfinity } from '@eventespresso/services';\nimport { InlineEditInfinity, TextProps } from '@eventespresso/components';\nimport {\n\tuseDatetimeMutator,\n\tuseUpdateRelatedTickets,\n\tuseTicketQuantityForCapacity,\n} from '@eventespresso/edtr-services';\nimport { getPropsAreEqual } from '@eventespresso/services';\nimport type { DateItemProps } from '../types';\n\nconst DateCapacity: React.FC<DateItemProps> = ({ entity: datetime }) => {\n\tconst { updateEntity } = useDatetimeMutator(datetime.id);\n\n\tconst updateRelatedTickets = useUpdateRelatedTickets(datetime.id);\n\tconst ticketQuantityForCapacity = useTicketQuantityForCapacity();\n\n\tconst onChange: TextProps['onChange'] = useCallback(\n\t\t(cap) => {\n\t\t\tconst capacity = parseInfinity(cap);\n\t\t\tif (capacity !== datetime.capacity) {\n\t\t\t\tupdateEntity({ capacity });\n\n\t\t\t\tconst inputGenerator = ticketQuantityForCapacity(capacity);\n\t\t\t\tupdateRelatedTickets(inputGenerator);\n\t\t\t}\n\t\t},\n\t\t[datetime.capacity, updateEntity, ticketQuantityForCapacity, updateRelatedTickets]\n\t);\n\n\treturn <InlineEditInfinity onChangeValue={onChange} value={`${datetime.capacity}`} />;\n};\n\nexport default React.memo(DateCapacity, getPropsAreEqual(['entity']));\n","import React, { useCallback } from 'react';\nimport { __ } from '@wordpress/i18n';\n\nimport type { DateItemProps } from '../types';\nimport { useDatetimeMutator } from '@eventespresso/edtr-services';\nimport { InlineEditTextArea } from '@eventespresso/components';\nimport { getPropsAreEqual } from '@eventespresso/services';\n\ninterface EditableDescProps extends DateItemProps {\n\tclassName?: string;\n}\n\nconst EditableDesc: React.FC<EditableDescProps> = ({ entity: datetime, className }) => {\n\tconst { updateEntity } = useDatetimeMutator(datetime.id);\n\n\tconst onChangeDesc = useCallback(\n\t\t(description: string): void => {\n\t\t\tif (description !== datetime.description) {\n\t\t\t\tupdateEntity({ description });\n\t\t\t}\n\t\t},\n\t\t[datetime.description, updateEntity]\n\t);\n\n\tconst dateDesc = datetime.description ? datetime.description : __('Edit description...');\n\n\treturn <InlineEditTextArea className={className} onChangeValue={onChangeDesc} value={dateDesc} />;\n};\n\nexport default React.memo(EditableDesc, getPropsAreEqual(['entity', 'description']));\n","import React, { useCallback } from 'react';\nimport { __ } from '@wordpress/i18n';\n\nimport type { DateItemProps } from '../types';\nimport { useDatetimeMutator } from '@eventespresso/edtr-services';\nimport { InlineEditText } from '@eventespresso/components';\nimport { getPropsAreEqual } from '@eventespresso/services';\n\ninterface EditableNameProps extends DateItemProps {\n\tclassName?: string;\n\tview?: 'card' | 'table';\n}\n\nconst EditableName: React.FC<EditableNameProps> = ({ className, entity: datetime, view = 'card' }) => {\n\tconst { updateEntity } = useDatetimeMutator(datetime.id);\n\n\tconst dateName = datetime.name ? datetime.name : __('Edit title...');\n\n\tconst onChangeName = useCallback(\n\t\t(name: string): void => {\n\t\t\tif (name !== datetime.name) {\n\t\t\t\tupdateEntity({ name });\n\t\t\t}\n\t\t},\n\t\t[datetime.name, updateEntity]\n\t);\n\n\treturn (\n\t\t<InlineEditText\n\t\t\tfitText={view === 'card'}\n\t\t\ttag={view === 'table' ? 'p' : 'h4'}\n\t\t\tclassName={className}\n\t\t\tonChangeValue={onChangeName}\n\t\t\tvalue={dateName}\n\t\t/>\n\t);\n};\n\nexport default React.memo(EditableName, getPropsAreEqual(['entity', 'name']));\n","import React from 'react';\n\nimport type { Datetime } from '@eventespresso/edtr-services';\nimport { useEntityActionsMenuItems } from '@edtrHooks/index';\n\nconst useDatesActionMenuItems = (datetime: Datetime): Array<React.ReactNode> => {\n\treturn useEntityActionsMenuItems('datetime', datetime);\n};\n\nexport default useDatesActionMenuItems;\n","import React from 'react';\n\nimport type { ActionsMenuComponentProps } from '@eventespresso/registry';\nimport { EntityActionsMenu } from '@eventespresso/components';\nimport useDatesActionMenuItems from '../../hooks/useDatesActionMenuItems';\nimport { Datetime } from '@eventespresso/edtr-services';\nimport { getPropsAreEqual } from '@eventespresso/services';\n\nconst DateActionsMenu: React.FC<ActionsMenuComponentProps<Datetime>> = ({ entity, ...props }) => {\n\tconst menuItems = useDatesActionMenuItems(entity);\n\n\treturn <EntityActionsMenu {...props} menuItems={menuItems} />;\n};\n\nexport default React.memo(DateActionsMenu, getPropsAreEqual(['entity', 'cacheId']));\n","import React from 'react';\nimport { __ } from '@wordpress/i18n';\n\nimport { EntityDetailsPanel } from '@eventespresso/components';\nimport DateRegistrationsLink from '../../DateRegistrationsLink';\nimport DateCapacity from './DateCapacity';\nimport { getPropsAreEqual } from '@eventespresso/services';\nimport type { DateItemProps } from '../types';\n\nconst DateDetailsPanel: React.FC<DateItemProps> = ({ entity: datetime }) => {\n\tconst details = [\n\t\t{\n\t\t\tid: 'ee-event-date-sold',\n\t\t\tlabel: __('sold'),\n\t\t\tvalue: datetime.sold || 0,\n\t\t},\n\t\t{\n\t\t\tid: 'ee-event-date-capacity',\n\t\t\tlabel: __('capacity'),\n\t\t\tvalue: <DateCapacity entity={datetime} />,\n\t\t},\n\t\t{\n\t\t\tid: 'ee-event-date-registrations',\n\t\t\tclassName: 'ee-has-tooltip',\n\t\t\tlabel: __('reg list'),\n\t\t\tvalue: <DateRegistrationsLink datetime={datetime} />,\n\t\t},\n\t];\n\n\treturn <EntityDetailsPanel details={details} className='ee-editor-date-details-sold-rsrvd-cap-div' />;\n};\n\nexport default React.memo(DateDetailsPanel, getPropsAreEqual(['entity', 'cacheId']));\n","import React from 'react';\n\nimport DateDetailsPanel from './DateDetailsPanel';\nimport { EditableDesc, EditableName } from '../editable';\nimport { getPropsAreEqual } from '@eventespresso/services';\n\nimport type { DateItemProps } from '../types';\n\nconst Details: React.FC<DateItemProps> = ({ entity: datetime }) => {\n\treturn (\n\t\t<>\n\t\t\t<EditableName className={'entity-card-details__name'} entity={datetime} />\n\n\t\t\t<EditableDesc className={'entity-card-details__description'} entity={datetime} />\n\n\t\t\t<DateDetailsPanel entity={datetime} />\n\t\t</>\n\t);\n};\n\nexport default React.memo(Details, getPropsAreEqual(['entity', 'cacheId']));\n","import React from 'react';\nimport { CalendarDateSwitcher } from '@eventespresso/components';\n\nimport DateActionsMenu from '../actionsMenu/DateActionsMenu';\nimport { EntityActionsMenuLayout } from '@eventespresso/components';\n\nimport { getDatetimeStatusTextLabel, datetimeStatusBgColorClassName } from '@eventespresso/helpers';\n\nimport { EntityCard } from '@eventespresso/components';\nimport { useDatesListFilterState } from '@edtrServices/filterState';\nimport { getPropsAreEqual } from '@eventespresso/services';\nimport { useMemoStringify } from '@eventespresso/hooks';\nimport Details from './Details';\nimport type { DateItemProps } from '../types';\n\nconst DateCard: React.FC<DateItemProps> = ({ entity: date }) => {\n\tconst bgClassName = datetimeStatusBgColorClassName(date);\n\tconst { displayStartOrEndDate } = useDatesListFilterState();\n\tconst footer = getDatetimeStatusTextLabel(date);\n\tconst labels = useMemoStringify({ footer });\n\n\treturn date ? (\n\t\t<EntityCard\n\t\t\tentity={date}\n\t\t\tcacheId={date.cacheId + displayStartOrEndDate}\n\t\t\tactionsMenu={<DateActionsMenu entity={date} layout={EntityActionsMenuLayout.Vertical} />}\n\t\t\tsidebar={\n\t\t\t\t<CalendarDateSwitcher\n\t\t\t\t\tclassName={bgClassName}\n\t\t\t\t\tdisplayDate={displayStartOrEndDate}\n\t\t\t\t\tendDate={date.endDate}\n\t\t\t\t\tlabels={labels}\n\t\t\t\t\tstartDate={date.startDate}\n\t\t\t\t/>\n\t\t\t}\n\t\t\tdetails={<Details entity={date} />}\n\t\t/>\n\t) : null;\n};\n\nexport default React.memo(DateCard, getPropsAreEqual(['entity', 'cacheId']));\n","import React from 'react';\nimport { EntityCardList } from '@eventespresso/components';\nimport DateCard from './DateCard';\nimport { useDatesListContext } from '@edtrServices/context/EntityListContext';\n\nconst CardView: React.FC = React.memo(() => {\n\tconst { filteredEntities } = useDatesListContext();\n\n\treturn <EntityCardList EntityCard={DateCard} entities={filteredEntities} />;\n});\n\nexport default CardView;\n"],"sourceRoot":""}